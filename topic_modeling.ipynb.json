{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "from sklearn import metrics\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import lda\n",
    "import random\n",
    "random.seed(1)\n",
    "import string\n",
    "import nltk\n",
    "from textblob import TextBlob\n",
    "from textblob import Word\n",
    "import pickle\n",
    "from nltk.tokenize import word_tokenize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "stats = pd.read_pickle('/Users/boyaliu/Documents/UCD/LIN 127/final/stats_df.pickle')\n",
    "game = pd.read_pickle('/Users/boyaliu/Documents/UCD/LIN 127/final/gaming_df.pickle')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cook = pd.read_pickle('/Users/boyaliu/Documents/UCD/LIN 127/final/cooking_df.pickle')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#stats = stats\n",
    "#game = game[1:15000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "stats['body_title'] = stats['Body'] + stats['Title']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cook['body_title'] = cook['Body'] + cook['Title']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16060, 3)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cook.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(92335, 3)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Text Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "verb_exp = ['VB', 'VBZ', 'VBP', 'VBD','VBN','VBG']\n",
    "stop_words = pd.read_pickle('/Users/boyaliu/Documents/UCD/LIN 127/final/stop_words.pickle.txt')\n",
    "def lem_stop(row):\n",
    "    row = row.lower()\n",
    "    #remove numbers\n",
    "    raw = re.sub('[0-9]+?', ' ', row) \n",
    "    # remove punctuation\n",
    "    regex = re.compile('[%s]' % re.escape(string.punctuation))\n",
    "    raw = regex.sub(' ', raw)\n",
    "    #clean out the characters left out after the above step, like we’re, I’m, It’s, i.e.\n",
    "    raw = re.sub('( s )|( re )|( m )|( i e )',' ',raw) \n",
    "    # lementize\n",
    "    row_t = TextBlob(raw)\n",
    "    raw = []\n",
    "    for word, pos in row_t.tags:\n",
    "        if pos in verb_exp:\n",
    "            word = Word(word)\n",
    "            word = word.lemmatize(\"v\")\n",
    "        else:\n",
    "            word = Word(word)\n",
    "            word = word.lemmatize()\n",
    "        raw.append(word)\n",
    "    clean = ' '.join(raw)       \n",
    "    # remove stop words\n",
    "    cleaned_text = \" \".join([word for word in word_tokenize(clean) if word not in stop_words])      \n",
    "    return(cleaned_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "stat_clean = stats['body_title'].map(lambda i: lem_stop(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cook_clean = cook['body_title'].map(lambda i: lem_stop(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "with open('stat_clean','wb') as f:\n",
    "    pickle.dump(stat_clean,f)\n",
    "with open('cook_clean','wb') as f:\n",
    "    pickle.dump(cook_clean,f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Topic Modeling for Stats Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "stat_clean_sub = stat_clean.sample(n = 20000, random_state=0, axis=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 0: data set feature cluster class model refcode dataset\n",
      "Topic 1: distribution probability parameter random function variable normal likelihood\n",
      "Topic 2: model refcode variable regression linear effect predictor logistic\n",
      "Topic 3: test data hypothesis difference sample refcode result significant\n",
      "Topic 4: reflink network question learn algorithm problem paper neural\n",
      "Topic 5: matrix correlation vector covariance component variable variance pca\n",
      "Topic 6: time data series model plot refcode point fit\n",
      "Topic 7: group data analysis variable effect factor measure subject\n",
      "Topic 8: number probability time event question data problem user\n",
      "Topic 9: sample mean standard interval error confidence estimate size\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "cvectorizer = CountVectorizer(min_df=4, max_features=10000, stop_words='english')\n",
    "cvz = cvectorizer.fit_transform(stat_clean_sub)\n",
    "\n",
    "n_topics = 10\n",
    "n_iter = 2000\n",
    "stat_lda_model_sub = lda.LDA(n_topics=n_topics, n_iter=n_iter, random_state = 0)\n",
    "stat_X_topics_sub = stat_lda_model_sub.fit_transform(cvz)\n",
    "\n",
    "n_top_words = 8\n",
    "topic_summaries = []\n",
    "\n",
    "topic_word = stat_lda_model_sub.topic_word_  # get the topic words\n",
    "vocab = cvectorizer.get_feature_names()\n",
    "for i, topic_dist in enumerate(topic_word):\n",
    "    topic_words = np.array(vocab)[np.argsort(topic_dist)][:-(n_top_words+1):-1]\n",
    "    topic_summaries.append(' '.join(topic_words))\n",
    "    print('Topic {}: {}'.format(i, ' '.join(topic_words)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic Modeling for Cooks Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 0: reflink food question make good buy knife difference\n",
      "Topic 1: cook rice water potato make boil soup bean\n",
      "Topic 2: cook meat chicken beef roast pork steak time\n",
      "Topic 3: store eat day fridge long safe freeze food\n",
      "Topic 4: pan oven oil heat cook temperature iron pot\n",
      "Topic 5: make bake cake oven recipe pie pizza crust\n",
      "Topic 6: sauce oil make taste add tomato pepper onion\n",
      "Topic 7: make milk cream sugar butter chocolate cheese recipe\n",
      "Topic 8: egg bread flour recipe dough make bake yeast\n",
      "Topic 9: make coffee tea fruit juice water taste lemon\n"
     ]
    }
   ],
   "source": [
    "cvectorizer = CountVectorizer(min_df=4, max_features=10000, stop_words='english')\n",
    "cvz = cvectorizer.fit_transform(cook_clean)\n",
    "\n",
    "n_topics = 10\n",
    "n_iter = 2000\n",
    "cook_lda_model = lda.LDA(n_topics=n_topics, n_iter=n_iter, random_state = 0)\n",
    "cook_X_topics = cook_lda_model.fit_transform(cvz)\n",
    "\n",
    "n_top_words = 8\n",
    "topic_summaries = []\n",
    "\n",
    "topic_word = cook_lda_model.topic_word_  # get the topic words\n",
    "vocab = cvectorizer.get_feature_names()\n",
    "for i, topic_dist in enumerate(topic_word):\n",
    "    topic_words = np.array(vocab)[np.argsort(topic_dist)][:-(n_top_words+1):-1]\n",
    "    topic_summaries.append(' '.join(topic_words))\n",
    "    print('Topic {}: {}'.format(i, ' '.join(topic_words)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
